// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ssosystem.proto

#include "ssosystem.pb.h"
#include "ssosystem.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ssosystem {

static const char* SSOService_method_names[] = {
  "/ssosystem.SSOService/Register",
  "/ssosystem.SSOService/Login",
};

std::unique_ptr< SSOService::Stub> SSOService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SSOService::Stub> stub(new SSOService::Stub(channel));
  return stub;
}

SSOService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Register_(SSOService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(SSOService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status SSOService::Stub::Register(::grpc::ClientContext* context, const ::ssosystem::RegisterRequest& request, ::ssosystem::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ssosystem::RegisterResponse>* SSOService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::ssosystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ssosystem::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ssosystem::RegisterResponse>* SSOService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::ssosystem::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ssosystem::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::ClientReader< ::ssosystem::LoginResponse>* SSOService::Stub::LoginRaw(::grpc::ClientContext* context, const ::ssosystem::LoginRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ssosystem::LoginResponse>::Create(channel_.get(), rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncReader< ::ssosystem::LoginResponse>* SSOService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::ssosystem::LoginRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssosystem::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ssosystem::LoginResponse>* SSOService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::ssosystem::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssosystem::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false, nullptr);
}

SSOService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SSOService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SSOService::Service, ::ssosystem::RegisterRequest, ::ssosystem::RegisterResponse>(
          std::mem_fn(&SSOService::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SSOService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SSOService::Service, ::ssosystem::LoginRequest, ::ssosystem::LoginResponse>(
          std::mem_fn(&SSOService::Service::Login), this)));
}

SSOService::Service::~Service() {
}

::grpc::Status SSOService::Service::Register(::grpc::ServerContext* context, const ::ssosystem::RegisterRequest* request, ::ssosystem::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SSOService::Service::Login(::grpc::ServerContext* context, const ::ssosystem::LoginRequest* request, ::grpc::ServerWriter< ::ssosystem::LoginResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ssosystem

